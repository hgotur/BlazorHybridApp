@inherits ConnectedComponent
@using FirstBlazorHybridApp.redux.slices
@using FirstBlazorHybridApp.Game;

<div class="game-page">
    <div class="game-header">
        @if (State.GameState.Status == GameStatus.IN_PROGESS)
        {
            <h1>Question @State.GameState.Questions.Count</h1>
            @if (State.GameState.CurrentQuestion.QuestionStatus == QuestionStatus.TOSSUP)
            {
                <h3>Toss-Up</h3>
                <button class="btn btn-dark" @onclick="this.AwardNoAnswer">No Answer</button> 
            }
            else
            {
                <h3>Bonus for @State.GameState.CurrentQuestion.AnsweredByTeam?.Name</h3>
            }
        }
        else
        {
            <h3>Complete</h3>
        }
    </div>
    <div class="game-body">
        @foreach (var team in this.State.GameState.Teams)
        {
        <div class="team">
             <div class="team-header">
                <h3 class="team-name">@team.Name</h3>
                <div class="add-player">
                    <AddPlayer Add="AddPlayer" Team="team" />
                </div>
             </div>
             <div class="active-area">
                 @if (State.GameState.CurrentQuestion.QuestionStatus == QuestionStatus.BONUS && State.GameState.CurrentQuestion.AnsweredByTeam == team
                    || State.GameState.CurrentQuestion.QuestionStatus == QuestionStatus.BOUNCED_BONUS && State.GameState.CurrentQuestion.AnsweredByTeam != team)
                  {
                        <div class="bonus">
                            <h2 class="bonus-header">Bonus @(State.GameState.CurrentQuestion.BonusResults.Count + 1)</h2>
                            <div class="bonus-options">
                                <button class="btn btn-dark" @onclick="() => this.AwardBonus(true)">Correct</button>
                                <button class="btn btn-dark" @onclick="() => this.AwardBonus(false)">Incorrect</button>
                            </div>
                        </div> 
                  }  
                else
                {
                    <div class="players">
                        @foreach (var player in team.ActivePlayers)
                        {
                            <div class="player @(State.GameState.CurrentQuestion.CanAnswerTossup(player) ? "can-answer" : "")">
                                <div class="player-name">
                                    @player.Name
                                </div>
                                <div class="player-actions">
                                    @if (State.GameState.Metadata.PowerWeight.HasValue)
                                    {
                                        <div class="power-action" @onclick="() => this.AwardPower(player)">POWER</div>
                                    }
                                    <div class="tossup-action" @onclick="() => this.AwardTossup(player)">TOSS<br />UP</div>
                                    @if (State.GameState.Metadata.NegWeight.HasValue)
                                    {
                                        <div class="neg-action" @onclick="() => this.AwardNeg(player)">NEG</div>
                                    }
                                </div>
                            </div>
                        }
                    </div>          
                }
            </div>
            @if (team.BenchPlayers.Count != 0)
            {
                <h5 style="margin: 20px 0px 0px 10px;">Bench</h5>
                    <div class="players">
                        @foreach (var player in team.BenchPlayers)
                        {
                            <div class="player">
                                <div class="player-name">@player.Name</div>
                            </div>          
                        }
                    </div>
            }
        </div>
    }

        <div class="score-view">
            <ScoreView />
        </div>
    </div>

</div>

@code {
    private void AddPlayer(string name, Team team)
    {
        this.Dispatch(new GameSlice.AddPlayer(name, team));
    }

    private void AwardPower(Player player)
    {
        this.Dispatch(new GameSlice.AwardPower(player));
    }

    private void AwardTossup(Player player)
    {
        this.Dispatch(new GameSlice.AwardTossup(player));
    }

    private void AwardNeg(Player player)
    {
        this.Dispatch(new GameSlice.AwardNeg(player));
    }

    private void AwardBonus(bool isCorrect)
    {
        this.Dispatch(new GameSlice.AwardBonus(isCorrect));
    }

    private void AwardNoAnswer()
    {
        this.Dispatch(new GameSlice.AwardNoAnswer());
    }
}