@inherits ConnectedComponent
@using FirstBlazorHybridApp.redux.slices
@using FirstBlazorHybridApp.Game;

<div class="game-page">
    @foreach (var team in this.State.GameState.Teams)
    {
        <div class="team">
            <div class="team-header">
                <h3 class="team-name">@team.Name</h3>
                <div class="add-player">
                    <AddPlayer Add="AddPlayer" Team="team" />
                </div>
            </div>
            <div class="active-area">
                @if (State.GameState.CurrentQuestion.QuestionStatus == QuestionStatus.BONUS && State.GameState.CurrentQuestion.AnsweredByTeam == team
                    || State.GameState.CurrentQuestion.QuestionStatus == QuestionStatus.BOUNCED_BONUS && State.GameState.CurrentQuestion.AnsweredByTeam != team)
                {
                     <div class="bonus">
                         <div>Bonus @(State.GameState.CurrentQuestion.BonusResults.Count + 1)</div>
                         <button class="btn btn-primary" @onclick="() => this.AwardBonus(true)">Correct</button>
                         <button class="btn btn-primary" @onclick="() => this.AwardBonus(false)">Incorrect</button>
                     </div>
                }
                else
                {
                    <div class="players">
                        @foreach (var player in team.ActivePlayers)
                        {
                            <div class="player @(State.GameState.CurrentQuestion.CanAnswerTossup(player) ? "can-answer" : "")">
                                <div class="player-name">
                                    @player.Name
                                </div>
                                <div class="player-actions">
                                    @if (State.GameState.Metadata.PowerWeight.HasValue)
                                    {
                                        <div class="power-action" @onclick="() => this.AwardPower(player)">POWER</div>
                                    }
                                    <div class="tossup-action" @onclick="() => this.AwardTossup(player)">TOSS<br />UP</div>
                                    @if (State.GameState.Metadata.NegWeight.HasValue)
                                    {
                                        <div class="neg-action" @onclick="() => this.AwardNeg(player)">NEG</div>
                                    }
                                </div>
                            </div>
                         }
                    </div>
                }
            </div>

            @if (team.BenchPlayers.Count != 0)
            {
                <h5 style="margin: 20px 0px 0px 10px;">Bench</h5>
                <div class="players">
                    @foreach (var player in team.BenchPlayers)
                    {
                        <div class="player">
                            <p class="player-name">@player.Name</p>
                        </div>
                    }
                </div>
            }
        </div>
    }

    <div class="score-view">
        <ScoreView />
    </div>
</div>

@code {
    private void AddPlayer(string name, Team team)
    {
        this.Dispatch(new GameSlice.AddPlayer(name, team));
    }

    private void AwardPower(Player player)
    {
        this.Dispatch(new GameSlice.AwardPower(player));
    }

    private void AwardTossup(Player player)
    {
        this.Dispatch(new GameSlice.AwardTossup(player));
    }

    private void AwardNeg(Player player)
    {
        this.Dispatch(new GameSlice.AwardNeg(player));
    }

    private void AwardBonus(bool isCorrect)
    {
        this.Dispatch(new GameSlice.AwardBonus(isCorrect));
    }
}